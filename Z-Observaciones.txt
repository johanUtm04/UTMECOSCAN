# 1Ô∏è‚É£ Ver en qu√© rama est√°s
git branch

# 2Ô∏è‚É£ Ver cambios locales
git status

# 3Ô∏è‚É£ Traer info del remoto sin hacer merge
git fetch
git status

# 4Ô∏è‚É£ Comparar tu rama con el remoto
git log origin/main..HEAD      # commits locales que no est√°n en remoto
git log HEAD..origin/main      # commits remotos que no tienes

# 5Ô∏è‚É£ Traer cambios del remoto y actualizar tu rama
git pull

# 6Ô∏è‚É£ Ver todos los remotos configurados
git remote -v

# 7Ô∏è‚É£ Ver diferencias entre local y remoto
git diff origin/main

# 8Ô∏è‚É£ Preparar archivos para commit (a√±adir cambios)
git add .                      # a√±ade todos los cambios
# o git add <archivo>          # a√±ade solo un archivo espec√≠fico

# 9Ô∏è‚É£ Hacer commit
git commit -m "Mensaje de tu commit"

# üîü Subir cambios al remoto
git push

Link firebase:
https://console.firebase.google.com/u/0/project/contaminacion-en-el-aire-utm/overview

Usuarios base de datos
https://console.firebase.google.com/u/0/project/contaminacion-en-el-aire-utm/authentication/users

Codigo Creado...
main.tsx---->  App.stx / auth.ts---->

Efecto de prueba, en caso de no tener el Sensor...
probar Tablero
const [lecturas, setLecturas] = useState<Lectura[]>([]);

useEffect(() => {
  const fetchData = async () => {
    try {
      // Lista de sensores de ejemplo
      const sensores = ["PM2.5", "Temperatura", "Humedad", "CO2"];

      // Generamos un sensor aleatorio
      const data = {
        sensor: sensores[Math.floor(Math.random() * sensores.length)],
        pm25: Math.floor(Math.random() * 100), // valor aleatorio entre 0-99
      };

      // Creamos un objeto nuevaLectura siguiendo la interfaz Lectura
      const nuevaLectura: Lectura = {
        id: Date.now().toString(), // id √∫nico
        sensor: data.sensor,
        valor: data.pm25,
      };

      // Agregamos la lectura al estado (sin borrar las anteriores)
      setLecturas((estadoAnterior) => [...estadoAnterior, nuevaLectura]);

      //Nuevo paso: üî•
      await addDoc(collection(db, "lecturas")){
      sensor: data.sensor
      valor: timestamp
      salon: "Aula 1"
      userId: user?.uid, })

    } catch (err) {
      console.error("Error al generar datos:", err);
    }
  };

  // Llamamos cada 5 segundos para simular lecturas continuas
  const interval = setInterval(fetchData, 5000);
  return () => clearInterval(interval);
}, []);

Codigo de Tablero que si funciona: ‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®
 // React
import React, { useEffect, useState } from "react";

// Material UI
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import CardHeader from "@mui/material/CardHeader";
import Typography from "@mui/material/Typography";

//Importaciones para FireStore üî•üî•üî•üî•üî•
import { collection, addDoc, Timestamp, where, getDocs, query } from "firebase/firestore";
import { db } from "../firebase";

// Tipos
interface TABLERO {
  user: any; 
}

interface Lectura {
  timestamp: Timestamp;
  id: string;
  sensor: string;
  valor: number;
}

const Tablero: React.FC<TABLERO> = ({ user }) => {
const [lecturas, setLecturas] = useState<Lectura[]>([]);
const [fechaSeleccionada, setFechaSeleccionada] = useState<Date | null > (null);


//Consultar por fecha 2.-
const buscarPorFecha = async () => {
  if(!fechaSeleccionada) return;
  const datos = await getLecturasPorDia(fechaSeleccionada);
  setLecturas(datos);
}

async function getLecturasPorDia (fecha: Date){
  //Inicio del d√≠a
  const inicio = new Date(fecha);
  inicio.setHours(0,0,0,0);

  //fin del d√≠a
  const fin = new Date(fecha);
  fin.setHours(23,59,59,999);

  //armamos el query --La receta que quieres buscar
  const q = query (
    collection(db, "lecturas"),
    where("timestamp", ">=", Timestamp.fromDate(inicio)),
    where("timestamp", "<=", Timestamp.fromDate(fin))
  );

  //Ejecutamos el query, es decir, la consulta --Vas al refri y traes los alimentos segun la receta
  const querySnapshot = await getDocs(q);

  //Inicializacion de un arreglo vacio const resultados: any[]=[];
  const resultados: any[]=[];

    //Recorremos cada elemento de la consulta query
  querySnapshot.forEach((doc)=>{
      //Los meteremos en el array resultados
    resultados.push({id: doc.id, ...doc.data()});
          /*Ejemplo resultados quedaria algo asi:
          [
            {id:1, Timestamp: 12-may-35, valor:28},
            {}, {}, {}
          ] */

    //Escribimos en consola estos datos
    console.log(doc.id, doc.data().timestamp.toDate());
  })
  return resultados;
};

   useEffect(() => {
    //Funcion Asincronada (puede hacer coas que tardan en completarse)
    const fetchData = async () => {
      try {
        /* Con await, esperamos a que sea conectado el esp32 */
        const res = await fetch("http://192.168.1.97/data-json"); 
        //Convertimos los datos en un objeto JavaScript (Json)
        const data = await res.json();
        // Adaptamos el JSON a la interfaz Lectura[]
        //Creamos Una instancia del objeto "lectura"
        const nuevaLectura: Lectura = {
          timestamp: Timestamp.now(),
          id: Date.now().toString(),
          sensor: data.sensor,
          valor: data.pm25,
        };
        //Ir encadenando lecturas una atras de otra
        setLecturas((prev) => [...prev, nuevaLectura]); 
      } catch (err) {
        console.error("Error al obtener datos:", err);
      }
    };

    // Llamamos cada 5 segundos
    const interval = setInterval(fetchData, 5000);
    return () => clearInterval(interval);
  }, []);

//UsEffect para traer Datos y almacenarlos en fireStore

return (
  //Div principal.
  <div style={{ padding: "20px" }}>
    <div
      style={{
        marginBottom: "20px",
        padding: "20px",
        borderRadius: "20px",
        background: "rgba(255, 255, 255, 0.15)",
        backdropFilter: "blur(12px)",
        border: "3px solid rgba(0, 0, 0, 0.3)",
        color: "white",
        textAlign: "center",
      }}
    >
      <h2 style={{ marginBottom: "10px", color:"black", fontWeight:700 }}>
       Sistema de Medici√≥n de Calidad del Aire 
      </h2>
      <p style={{ fontSize: "16px", lineHeight: "1.5", color:"black" }}>
        Este experimento tiene como objetivo medir la concentraci√≥n de part√≠culas 
        en el aire utilizando sensores conectados a un ESP32.  
        Los datos recolectados son procesados en tiempo real y se muestran en este tablero.
      </p>
    </div>

    {/* Consultar por fecha 1.- */}
    <div>
      <h2>Historial de Lecturas</h2>
      <input type="date"
        onChange={(e) => {
          const value = e.target.value; // "2025-09-14"
          const [year, month, day] = value.split("-").map(Number);
          // üëá Crear la fecha en la zona local, no UTC
          setFechaSeleccionada(new Date(year, month - 1, day));
        }}
      />
      <button onClick={buscarPorFecha}>Buscar</button>
      |{/* Resultados */}
      <ul>
        {lecturas.map((l) => (
          <li key={l.id}>
            {l.sensor} =&rbrace; {l.valor} ({l.timestamp.toDate().toLocaleString()})
          </li>
        ))}
      </ul>
    </div>

    {lecturas.length === 0 ? (
      <Typography variant="h4" color="#000000ff" fontWeight={600}>
        No hay datos a√∫n.
      </Typography>
    ) : (
      <div
        style={{
          display: "flex",
          flexWrap: "wrap",
          gap: "15px",
          padding: "10px",
        }}
      >
        {lecturas.map((l) => (
          <Card
            key={l.id}
            sx={{
              width: 200,
              borderRadius: 2,
              boxShadow: 3,
              background: "rgba(255, 255, 255, 0.15)",
              backdropFilter: "blur(10px)",
              border: "1px solid rgba(255,255,255,0.3)",
            }}
          > 
            <CardHeader title={l.sensor} sx={{ color: "#000000ff" }} />
            <CardContent>
              <Typography variant="h5" sx={{ color: "#000000ff" }}>
                {l.valor} 
              </Typography>
              <Typography variant="body2" sx={{ color: "#000000ff" }}>
                √öltima actualizaci√≥n 
              </Typography>
            </CardContent>
          </Card>
        ))}
      </div>
    )}
  </div>
);

};

export default Tablero;


Codigo de Tablero que si funciona: ‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®
-lectura en tiempo Real, darle formato


<!-- HTML !-->
<button class="button-89" role="button">Button 89</button>

/* CSS */
.button-89 {
  --b: 3px;   /* border thickness */
  --s: .45em; /* size of the corner */
  --color: #373B44;
  
  padding: calc(.5em + var(--s)) calc(.9em + var(--s));
  color: var(--color);
  --_p: var(--s);
  background:
    conic-gradient(from 90deg at var(--b) var(--b),#0000 90deg,var(--color) 0)
    var(--_p) var(--_p)/calc(100% - var(--b) - 2*var(--_p)) calc(100% - var(--b) - 2*var(--_p));
  transition: .3s linear, color 0s, background-color 0s;
  outline: var(--b) solid #0000;
  outline-offset: .6em;
  font-size: 16px;

  border: 0;

  user-select: none;
  -webkit-user-select: none;
  touch-action: manipulation;
}

.button-89:hover,
.button-89:focus-visible{
  --_p: 0px;
  outline-color: var(--color);
  outline-offset: .05em;
}

.button-89:active {
  background: var(--color);
  color: #fff;
}